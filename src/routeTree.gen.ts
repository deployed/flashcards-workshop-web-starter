/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as SetsIndexImport } from './routes/sets/index'
import { Route as SetsSetIdIndexImport } from './routes/sets/$setId.index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SetsIndexRoute = SetsIndexImport.update({
  id: '/sets/',
  path: '/sets/',
  getParentRoute: () => rootRoute,
} as any)

const SetsSetIdIndexRoute = SetsSetIdIndexImport.update({
  id: '/sets/$setId/',
  path: '/sets/$setId/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/sets/': {
      id: '/sets/'
      path: '/sets'
      fullPath: '/sets'
      preLoaderRoute: typeof SetsIndexImport
      parentRoute: typeof rootRoute
    }
    '/sets/$setId/': {
      id: '/sets/$setId/'
      path: '/sets/$setId'
      fullPath: '/sets/$setId'
      preLoaderRoute: typeof SetsSetIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/sets': typeof SetsIndexRoute
  '/sets/$setId': typeof SetsSetIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/sets': typeof SetsIndexRoute
  '/sets/$setId': typeof SetsSetIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/sets/': typeof SetsIndexRoute
  '/sets/$setId/': typeof SetsSetIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/sets' | '/sets/$setId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/sets' | '/sets/$setId'
  id: '__root__' | '/' | '/sets/' | '/sets/$setId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SetsIndexRoute: typeof SetsIndexRoute
  SetsSetIdIndexRoute: typeof SetsSetIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SetsIndexRoute: SetsIndexRoute,
  SetsSetIdIndexRoute: SetsSetIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/sets/",
        "/sets/$setId/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/sets/": {
      "filePath": "sets/index.tsx"
    },
    "/sets/$setId/": {
      "filePath": "sets/$setId.index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
